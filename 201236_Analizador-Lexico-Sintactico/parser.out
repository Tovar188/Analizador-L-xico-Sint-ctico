Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMA

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     statement -> for_loop
Rule 3     statement -> print_statement
Rule 4     for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN LBRACE print_statement RBRACE
Rule 5     assignment -> INT ID EQUALS NUMBER
Rule 6     condition -> ID LE NUMBER
Rule 7     increment -> ID PLUS
Rule 8     print_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI

Terminals, with rules where they appear

COMMA                : 
DOT                  : 8 8
EQUALS               : 5
FOR                  : 4
ID                   : 5 6 7
INT                  : 5
LBRACE               : 4
LE                   : 6
LPAREN               : 4 8
NUMBER               : 5 6 8
OUT                  : 8
PLUS                 : 7 8
PRINTLN              : 8
RBRACE               : 4
RPAREN               : 4 8
SEMI                 : 4 4 8
STRING               : 8
SYSTEM               : 8
error                : 

Nonterminals, with rules where they appear

assignment           : 4
condition            : 4
for_loop             : 2
increment            : 4
print_statement      : 3 4
program              : 0
statement            : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) statement -> . for_loop
    (3) statement -> . print_statement
    (4) for_loop -> . FOR LPAREN assignment SEMI condition SEMI increment RPAREN LBRACE print_statement RBRACE
    (8) print_statement -> . SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI

    FOR             shift and go to state 5
    SYSTEM          shift and go to state 6

    program                        shift and go to state 1
    statement                      shift and go to state 2
    for_loop                       shift and go to state 3
    print_statement                shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .

    $end            reduce using rule 1 (program -> statement .)


state 3

    (2) statement -> for_loop .

    $end            reduce using rule 2 (statement -> for_loop .)


state 4

    (3) statement -> print_statement .

    $end            reduce using rule 3 (statement -> print_statement .)


state 5

    (4) for_loop -> FOR . LPAREN assignment SEMI condition SEMI increment RPAREN LBRACE print_statement RBRACE

    LPAREN          shift and go to state 7


state 6

    (8) print_statement -> SYSTEM . DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI

    DOT             shift and go to state 8


state 7

    (4) for_loop -> FOR LPAREN . assignment SEMI condition SEMI increment RPAREN LBRACE print_statement RBRACE
    (5) assignment -> . INT ID EQUALS NUMBER

    INT             shift and go to state 10

    assignment                     shift and go to state 9

state 8

    (8) print_statement -> SYSTEM DOT . OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI

    OUT             shift and go to state 11


state 9

    (4) for_loop -> FOR LPAREN assignment . SEMI condition SEMI increment RPAREN LBRACE print_statement RBRACE

    SEMI            shift and go to state 12


state 10

    (5) assignment -> INT . ID EQUALS NUMBER

    ID              shift and go to state 13


state 11

    (8) print_statement -> SYSTEM DOT OUT . DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI

    DOT             shift and go to state 14


state 12

    (4) for_loop -> FOR LPAREN assignment SEMI . condition SEMI increment RPAREN LBRACE print_statement RBRACE
    (6) condition -> . ID LE NUMBER

    ID              shift and go to state 16

    condition                      shift and go to state 15

state 13

    (5) assignment -> INT ID . EQUALS NUMBER

    EQUALS          shift and go to state 17


state 14

    (8) print_statement -> SYSTEM DOT OUT DOT . PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI

    PRINTLN         shift and go to state 18


state 15

    (4) for_loop -> FOR LPAREN assignment SEMI condition . SEMI increment RPAREN LBRACE print_statement RBRACE

    SEMI            shift and go to state 19


state 16

    (6) condition -> ID . LE NUMBER

    LE              shift and go to state 20


state 17

    (5) assignment -> INT ID EQUALS . NUMBER

    NUMBER          shift and go to state 21


state 18

    (8) print_statement -> SYSTEM DOT OUT DOT PRINTLN . LPAREN STRING PLUS NUMBER RPAREN SEMI

    LPAREN          shift and go to state 22


state 19

    (4) for_loop -> FOR LPAREN assignment SEMI condition SEMI . increment RPAREN LBRACE print_statement RBRACE
    (7) increment -> . ID PLUS

    ID              shift and go to state 24

    increment                      shift and go to state 23

state 20

    (6) condition -> ID LE . NUMBER

    NUMBER          shift and go to state 25


state 21

    (5) assignment -> INT ID EQUALS NUMBER .

    SEMI            reduce using rule 5 (assignment -> INT ID EQUALS NUMBER .)


state 22

    (8) print_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN . STRING PLUS NUMBER RPAREN SEMI

    STRING          shift and go to state 26


state 23

    (4) for_loop -> FOR LPAREN assignment SEMI condition SEMI increment . RPAREN LBRACE print_statement RBRACE

    RPAREN          shift and go to state 27


state 24

    (7) increment -> ID . PLUS

    PLUS            shift and go to state 28


state 25

    (6) condition -> ID LE NUMBER .

    SEMI            reduce using rule 6 (condition -> ID LE NUMBER .)


state 26

    (8) print_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING . PLUS NUMBER RPAREN SEMI

    PLUS            shift and go to state 29


state 27

    (4) for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN . LBRACE print_statement RBRACE

    LBRACE          shift and go to state 30


state 28

    (7) increment -> ID PLUS .

    RPAREN          reduce using rule 7 (increment -> ID PLUS .)


state 29

    (8) print_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS . NUMBER RPAREN SEMI

    NUMBER          shift and go to state 31


state 30

    (4) for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN LBRACE . print_statement RBRACE
    (8) print_statement -> . SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI

    SYSTEM          shift and go to state 6

    print_statement                shift and go to state 32

state 31

    (8) print_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER . RPAREN SEMI

    RPAREN          shift and go to state 33


state 32

    (4) for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN LBRACE print_statement . RBRACE

    RBRACE          shift and go to state 34


state 33

    (8) print_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN . SEMI

    SEMI            shift and go to state 35


state 34

    (4) for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN LBRACE print_statement RBRACE .

    $end            reduce using rule 4 (for_loop -> FOR LPAREN assignment SEMI condition SEMI increment RPAREN LBRACE print_statement RBRACE .)


state 35

    (8) print_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI .

    $end            reduce using rule 8 (print_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI .)
    RBRACE          reduce using rule 8 (print_statement -> SYSTEM DOT OUT DOT PRINTLN LPAREN STRING PLUS NUMBER RPAREN SEMI .)

